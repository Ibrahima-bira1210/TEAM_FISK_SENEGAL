{"version":3,"sources":["findLastValidBreakpoint.test.tsx"],"names":["describe","test","expect","theme","breakpoints","toBe","base","sm","lg"],"mappings":"AAAA,gDACA,kCAEAA,QAAQ,CAAC,MAAD,CAAS,UAAM,CAErBC,IAAI,CAAC,mBAAD,CAAsB,UAAM,CAC9BC,MAAM,CAAC,mCAAwB,CAAC,CAAD,CAAI,CAAJ,CAAxB,CAAgCC,aAAMC,WAAtC,CAAmD,CAAnD,CAAD,CAAN,CAA8DC,IAA9D,CAAmE,CAAnE,EACD,CAFG,CAAJ,CAGAJ,IAAI,CAAC,oBAAD,CAAuB,UAAM,CAC/BC,MAAM,CAAC,mCAAwB,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAxB,CAAmCC,aAAMC,WAAzC,CAAsD,CAAtD,CAAD,CAAN,CAAiEC,IAAjE,CAAsE,CAAtE,EACD,CAFG,CAAJ,CAGAJ,IAAI,CAAC,kBAAD,CAAqB,UAAM,CAC7BC,MAAM,CAAC,mCAAwB,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAxB,CAAmCC,aAAMC,WAAzC,CAAsD,CAAtD,CAAD,CAAN,CAAiEC,IAAjE,CAAsE,CAAtE,EACD,CAFG,CAAJ,CAGAJ,IAAI,CAAC,oBAAD,CAAuB,UAAM,CAC/BC,MAAM,CACJ,mCAAwB,CAAEI,IAAI,CAAE,CAAR,CAAWC,EAAE,CAAE,CAAf,CAAkBC,EAAE,CAAE,CAAtB,CAAxB,CAAmDL,aAAMC,WAAzD,CAAsE,CAAtE,CADI,CAAN,CAEEC,IAFF,CAEO,CAFP,EAGD,CAJG,CAAJ,CAKAJ,IAAI,CAAC,uBAAD,CAA0B,UAAM,CAClCC,MAAM,CACJ,mCAAwB,CAAEI,IAAI,CAAE,CAAR,CAAWC,EAAE,CAAE,CAAf,CAAkBC,EAAE,CAAE,CAAtB,CAAxB,CAAmDL,aAAMC,WAAzD,CAAsE,CAAtE,CADI,CAAN,CAEEC,IAFF,CAEO,CAFP,EAGD,CAJG,CAAJ,CAKAJ,IAAI,CAAC,uBAAD,CAA0B,UAAM,CAClCC,MAAM,CACJ,mCAAwB,CAAEI,IAAI,CAAE,CAAR,CAAWC,EAAE,CAAE,CAAf,CAAkBC,EAAE,CAAE,CAAtB,CAAxB,CAAmDL,aAAMC,WAAzD,CAAsE,CAAtE,CADI,CAAN,CAEEC,IAFF,CAEO,CAFP,EAGD,CAJG,CAAJ,CAKAJ,IAAI,CAAC,mBAAD,CAAsB,UAAM,CAC9BC,MAAM,CACJ,mCAAwB,CAAEI,IAAI,CAAE,CAAR,CAAWC,EAAE,CAAE,CAAf,CAAkBC,EAAE,CAAE,CAAtB,CAAxB,CAAmDL,aAAMC,WAAzD,CAAsE,CAAtE,CADI,CAAN,CAEEC,IAFF,CAEO,CAFP,EAGD,CAJG,CAAJ,CAKD,CA/BO,CAAR","sourcesContent":["import { findLastValidBreakpoint } from './../../theme/tools/utils';\nimport { theme } from '../../theme';\n\ndescribe('mode', () => {\n  // const theme = useTheme();\n  test('First array value', () => {\n    expect(findLastValidBreakpoint([1, 2], theme.breakpoints, 0)).toBe(1);\n  });\n  test('Middle array value', () => {\n    expect(findLastValidBreakpoint([1, 2, 3], theme.breakpoints, 1)).toBe(2);\n  });\n  test('Last array value', () => {\n    expect(findLastValidBreakpoint([1, 2, 3], theme.breakpoints, 2)).toBe(3);\n  });\n  test('First Object value', () => {\n    expect(\n      findLastValidBreakpoint({ base: 1, sm: 2, lg: 3 }, theme.breakpoints, 0)\n    ).toBe(1);\n  });\n  test('Middle object value 1', () => {\n    expect(\n      findLastValidBreakpoint({ base: 1, sm: 2, lg: 3 }, theme.breakpoints, 1)\n    ).toBe(2);\n  });\n  test('Middle object value 2', () => {\n    expect(\n      findLastValidBreakpoint({ base: 1, sm: 2, lg: 3 }, theme.breakpoints, 2)\n    ).toBe(2);\n  });\n  test('Last object value', () => {\n    expect(\n      findLastValidBreakpoint({ base: 1, sm: 2, lg: 3 }, theme.breakpoints, 3)\n    ).toBe(3);\n  });\n});\n"]}