{"version":3,"sources":["Text.test.tsx"],"names":["jest","useFakeTimers","theme","defaultTheme","fontConfig","Roboto","normal","italic","fonts","heading","body","Provider","props","frame","x","y","width","height","insets","top","left","right","bottom","describe","it","getByTestId","text","expect","style","fontFamily","toBe","newTheme","JSON","parse","stringify","undefined","fontWeight","fontStyle","lineHeight","fontSizes","sm","parseFloat","lineHeights","md","letterSpacing","letterSpacings","Platform","OS","e","message","toContain"],"mappings":"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","sourcesContent":["//@ts-nocheck\nimport React from 'react';\nimport { render } from '@testing-library/react-native';\nimport Text from '../../Text';\nimport { NativeBaseProvider } from '../../../../core/NativeBaseProvider';\nimport { theme as defaultTheme } from '../../../../theme';\nimport { Platform } from 'react-native';\n\njest.useFakeTimers();\n\nconst theme = {\n  ...defaultTheme,\n  fontConfig: {\n    Roboto: {\n      100: 'Roboto-Light',\n      200: 'Roboto-Light',\n      300: 'Roboto-Light',\n      400: {\n        normal: 'Roboto-Regular',\n        italic: 'Roboto-Italic',\n      },\n      500: 'Roboto-Medium',\n      600: 'Roboto-Medium',\n      700: {\n        normal: 'Roboto-Bold',\n        italic: 'Roboto-BoldItalic',\n      },\n      800: 'Roboto-Bold',\n      900: 'Roboto-Black',\n    },\n  },\n  fonts: {\n    ...defaultTheme.fonts,\n    heading: 'Roboto',\n    body: 'Roboto',\n  },\n};\n\nconst Provider = (props: any) => {\n  return (\n    <NativeBaseProvider\n      theme={theme}\n      {...props}\n      initialWindowMetrics={{\n        frame: { x: 0, y: 0, width: 0, height: 0 },\n        insets: { top: 0, left: 0, right: 0, bottom: 0 },\n      }}\n    />\n  );\n};\n\ndescribe('Text component', () => {\n  it('resolves default custom fonts', () => {\n    const { getByTestId } = render(\n      <Provider>\n        <Text testID=\"my-text\">hello world</Text>\n      </Provider>\n    );\n    const text = getByTestId('my-text');\n    expect(text.props.style.fontFamily).toBe('Roboto-Regular');\n  });\n\n  it('resolves custom font variants', () => {\n    const { getByTestId } = render(\n      <Provider>\n        <Text testID=\"my-text\" fontStyle=\"italic\">\n          hello world\n        </Text>\n      </Provider>\n    );\n    const text = getByTestId('my-text');\n    expect(text.props.style.fontFamily).toBe('Roboto-Italic');\n  });\n\n  it('resolves to bold italic font', () => {\n    const { getByTestId } = render(\n      <Provider>\n        <Text testID=\"my-text\" fontWeight=\"bold\" fontStyle=\"italic\">\n          hello world\n        </Text>\n      </Provider>\n    );\n    const text = getByTestId('my-text');\n    expect(text.props.style.fontFamily).toBe('Roboto-BoldItalic');\n  });\n\n  it('resolves to medium font when fontWeight is 500', () => {\n    const { getByTestId } = render(\n      <Provider>\n        <Text testID=\"my-text\" fontWeight={500}>\n          hello world\n        </Text>\n      </Provider>\n    );\n    const text = getByTestId('my-text');\n    expect(text.props.style.fontFamily).toBe('Roboto-Medium');\n  });\n\n  it('resolves to medium font when fontWeight is medium', () => {\n    const { getByTestId } = render(\n      <Provider>\n        <Text testID=\"my-text\" fontWeight={'medium'}>\n          hello world\n        </Text>\n      </Provider>\n    );\n    const text = getByTestId('my-text');\n    expect(text.props.style.fontFamily).toBe('Roboto-Medium');\n  });\n\n  it('respects fontFamily property', () => {\n    const { getByTestId } = render(\n      <Provider>\n        <Text testID=\"my-text\" fontFamily=\"Merriweather-Italic\">\n          hello world\n        </Text>\n      </Provider>\n    );\n    const text = getByTestId('my-text');\n    expect(text.props.style.fontFamily).toBe('Merriweather-Italic');\n  });\n\n  it(\"doesn't break if custom font is not specified\", () => {\n    const newTheme = JSON.parse(JSON.stringify(defaultTheme));\n    delete newTheme.fontConfig;\n    const { getByTestId } = render(\n      <Provider theme={newTheme}>\n        <Text testID=\"my-text\" fontWeight={400}>\n          hello world\n        </Text>\n      </Provider>\n    );\n    const text = getByTestId('my-text');\n    expect(text.props.style.fontFamily).toBe(undefined);\n  });\n\n  it(\"doesn't pass fontWeight and fontStyle if a custom fontFamily is resolved\", () => {\n    const { getByTestId } = render(\n      <Provider>\n        <Text testID=\"my-text\" fontWeight={400}>\n          hello world\n        </Text>\n      </Provider>\n    );\n    const text = getByTestId('my-text');\n    expect(text.props.style.fontWeight).toBe(undefined);\n    expect(text.props.style.fontStyle).toBe(undefined);\n    expect(text.props.style.fontFamily).toBe('Roboto-Regular');\n  });\n\n  it('tests lineHeight from token in text ', () => {\n    const { getByTestId } = render(\n      <Provider>\n        <Text lineHeight=\"md\" testID=\"test\">\n          This is a text\n        </Text>\n      </Provider>\n    );\n    const text = getByTestId('test');\n    expect(text.props.style.lineHeight).toBe(\n      defaultTheme.fontSizes.sm * parseFloat(defaultTheme.lineHeights.md)\n    );\n  });\n\n  it('tests absolute lineHeight in text ', () => {\n    const { getByTestId } = render(\n      <Provider>\n        <Text lineHeight={5} testID=\"test\">\n          This is a text\n        </Text>\n      </Provider>\n    );\n    const text = getByTestId('test');\n    expect(text.props.style.lineHeight).toBe(5);\n  });\n\n  it('tests em non token lineHeight in text ', () => {\n    const { getByTestId } = render(\n      <Provider>\n        <Text lineHeight=\"13em\" testID=\"test\">\n          This is a text\n        </Text>\n      </Provider>\n    );\n    const text = getByTestId('test');\n    expect(text.props.style.lineHeight).toBe(defaultTheme.fontSizes.sm * 13);\n  });\n\n  it('tests letterSpacing from token in text ', () => {\n    const { getByTestId } = render(\n      <Provider>\n        <Text letterSpacing=\"2xl\" testID=\"test\">\n          This is a text\n        </Text>\n      </Provider>\n    );\n    const text = getByTestId('test');\n    expect(text.props.style.letterSpacing).toBe(\n      defaultTheme.fontSizes.sm * parseFloat(defaultTheme.letterSpacings['2xl'])\n    );\n  });\n\n  it('tests letterSpacing in em from token in text ', () => {\n    Platform.OS = 'web';\n    try {\n      render(\n        <Provider>\n          <Text letterSpacing=\"2xl\" testID=\"test\">\n            This is a text\n          </Text>\n        </Provider>\n      );\n    } catch (e) {\n      expect(e.message).toContain(`\"letterSpacing\": \"0.1em\"`);\n    } finally {\n      Platform.OS = 'ios';\n    }\n  });\n\n  it('tests lineHeight and letterSpacing in px', () => {\n    const { getByTestId } = render(\n      <Provider>\n        <Text lineHeight=\"24px\" letterSpacing=\"12px\" testID=\"test\">\n          This is a text\n        </Text>\n      </Provider>\n    );\n    const text = getByTestId('test');\n    expect(text.props.style.lineHeight).toBe(24);\n    expect(text.props.style.letterSpacing).toBe(12);\n  });\n});\n"]}